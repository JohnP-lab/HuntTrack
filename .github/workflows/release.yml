name: BuildRelease

on:
    workflow_dispatch:
    push:
        branches: [master]
        tags:
            - '*'
    pull_request:
        branches: [master]

permissions:
    contents: write

env:
    PROJECT_NAME: HuntTrack

jobs:
    version:
        runs-on: ubuntu-latest
        outputs:
            new_tag: ${{ steps.bump.outputs.newTag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Nécessaire pour voir tous les tags

            - name: Bump version and create tag
              id: bump
              uses: phips28/gh-action-bump-version@v10.1.1
              with:
                  tag-prefix: "" # Pour avoir des tags comme 1.0.0 (sans "v")
                  major-wording: 'MAJOR,cut-major,NEW'
                  minor-wording: 'add,Adds,ADD'
                  patch-wording: 'patch,fixes,FIX'
                  commit-message: "[AUTO] MAJ package.json to version {{version}}"
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    build:
        needs: version
        runs-on: windows-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: recursive

            - name: Setup .NET
              uses: actions/setup-dotnet@v1
              with:
                  dotnet-version: '9.x.x'

            - name: Setup MSBuild
              uses: microsoft/setup-msbuild@v2

            - name: Download Dalamud
              run: |
                  Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/stg/latest.zip -OutFile latest.zip
                  Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev\"
                  
            - name: Write version into JSON
              run: |
                $ver = "${{ needs.version.outputs.new_tag }}"
                $path = './HuntTrack/HuntTrack.json'
                $json = Get-Content -Raw $path | ConvertFrom-Json
                $json.AssemblyVersion = $ver
                $content = $json | ConvertTo-Json
                Set-Content -Path $path -Value $content

            - name: Build
              run: |
                $ver = "${{ needs.version.outputs.new_tag }}"               
                echo "Building version $ver"
                dotnet build HuntTrack/HuntTrack.csproj --configuration Release `
                -p:Version=$ver `
                -p:FileVersion=$ver `
                -p:AssemblyVersion=$ver
              env:
                  DOTNET_CLI_TELEMETRY_OUTPUT: true

            -   name: Debug - list bin/Release contents
                run: |
                    Get-ChildItem -Path .\ -Recurse | Where-Object { $_.Name -like '*.dll' -or $_.Name -like '*.json' }   

            - name: Create artifact
              run: |
                  Compress-Archive -Path "./HuntTrack/bin/Release/*" -DestinationPath HuntTrack.zip
            
            -  name: Check if HuntTrack.zip exists
               run: |
                    if (Test-Path "HuntTrack.zip") {
                      Write-Output "✅ HuntTrack.zip found!"
                      Get-Item "HuntTrack.zip" | Format-List
                    } else {
                      Write-Output "❌ HuntTrack.zip not found!"
                      Get-ChildItem -Recurse
                    }
                    
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: HuntTrack
                  path: |
                      ./HuntTrack/bin/Release/*
                      ./HuntTrack.zip
                  if-no-files-found: error
            -   name: Debug - list bin/Release contents
                run: |
                    Get-ChildItem -Path .\ -Recurse | Where-Object { $_.Name -like '*.dll' -or $_.Name -like '*.json' }   

    release:
        needs: [build, version]
        runs-on: windows-latest
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: HuntTrack
            
            -   name: Debug - list bin/Release contents
                run: |
                    Get-ChildItem -Path .\ -Recurse | Where-Object { $_.Name -like '*.dll' -or $_.Name -like '*.json' }   
                    
            - name: Debug tag output
              run: | 
                echo "Tag version: ${{ needs.version.outputs.new_tag }}"
                   
            - name: Create release
              uses: softprops/action-gh-release@v2
              with:
                  name: ${{ env.PROJECT_NAME }} ${{ needs.version.outputs.new_tag }}
                  tag_name: ${{ needs.version.outputs.new_tag }}
                  body: Release automatique 
                  files: HuntTrack.zip

            - name: Write out repo.json
              run: |
                  $ver = '${{ needs.version.outputs.new_tag }}'
                  $path = './repo.json'
                  $json = Get-Content -Raw $path | ConvertFrom-Json
                  $json[0].AssemblyVersion = $ver
                  $json[0].TestingAssemblyVersion = $ver
                  $json[0].DownloadLinkInstall = $json.DownloadLinkInstall -replace '[^/]+/HuntTrack.zip',"$ver/HuntTrack.zip"
                  $json[0].DownloadLinkTesting = $json.DownloadLinkTesting -replace '[^/]+/HuntTrack.zip',"$ver/HuntTrack.zip"
                  $json[0].DownloadLinkUpdate = $json.DownloadLinkUpdate -replace '[^/]+/HuntTrack.zip',"$ver/HuntTrack.zip"
                  $content = $json | ConvertTo-Json -AsArray
                  Set-Content -Path $path -Value $content

            - name: Configure Git
              run: |
                  git config --global user.name "Actions User"
                  git config --global user.email "actions@github.com"
                  
            - name: Commit and Push Changes
              run: |
                  # Ajouter repo.json
                  git add repo.json HuntTrack/HuntTrack.json
                  git status
                  
                  # Committer les changements
                  git commit -m "[AUTO] MAJ repo.json to version ${{ needs.version.outputs.new_tag }}" || echo "No changes to commit"
                  
                  # Récupérer les derniers changements de la branche master
                  git fetch origin master
                  
                  # Rebaser les changements locaux sur la branche distante
                  git rebase origin/master || echo "Rebase failed, resolving conflicts"
                  
                  # Si le rebase est ok, push les modifications
                  git push origin master
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
